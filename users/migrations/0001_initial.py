# Generated by Django 3.0.6 on 2020-05-21 05:25

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import phone_field.models
import utils.upload
import utils.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='MainUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('phone', phone_field.models.PhoneField(blank=True, help_text='Номер телефона', max_length=31, null=True)),
                ('role', models.PositiveSmallIntegerField(choices=[(1, 'CLIENT'), (2, 'MERCHANT')], default=1, verbose_name='Роль')),
                ('is_staff', models.BooleanField(default=False, verbose_name='is_staff')),
                ('is_active', models.BooleanField(default=True, verbose_name='is_active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Город',
                'verbose_name_plural': 'Города',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Страна',
                'verbose_name_plural': 'Страны',
            },
        ),
        migrations.CreateModel(
            name='ProjectCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.CharField(max_length=1000, verbose_name='Описание')),
                ('image', models.FileField(blank=True, null=True, upload_to=utils.upload.project_category_image_path, validators=[utils.validators.basic_validate_images, utils.validators.validate_file_size], verbose_name='Изображение')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectPurpose',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectStyle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
            ],
        ),
        migrations.CreateModel(
            name='Specialization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Специализация',
                'verbose_name_plural': 'Специализации',
            },
        ),
        migrations.CreateModel(
            name='ProfileDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document', models.FileField(upload_to=utils.upload.profile_document_path, validators=[utils.validators.validate_file_size, utils.validators.basic_validate_images], verbose_name='Документ')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Документ специалиста',
                'verbose_name_plural': 'Документы специалистов',
            },
        ),
        migrations.CreateModel(
            name='MerchantProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Фамилия')),
                ('rating', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Рейтинг')),
                ('avatar', models.FileField(blank=True, null=True, upload_to=utils.upload.user_avatar_path, validators=[utils.validators.validate_file_size, utils.validators.basic_validate_images])),
                ('company_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Название компании')),
                ('address', models.CharField(blank=True, max_length=500, null=True)),
                ('description_short', models.CharField(max_length=160, verbose_name='Краткое описание')),
                ('description_full', models.CharField(max_length=1000, verbose_name='Подробное описание')),
                ('url', models.URLField(blank=True, null=True, verbose_name='Ссылка')),
                ('documents_description', models.CharField(max_length=1000, null=True, verbose_name='Описание документов')),
                ('pro', models.BooleanField(blank=True, default=False, verbose_name='Про аккаунт')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='merchant_profiles', to='users.ProjectCategory', verbose_name='Категория')),
                ('city', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='merchant_profiles', to='users.City', verbose_name='Город')),
                ('specialization', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='merchant_profiles', to='users.Specialization', verbose_name='Специалиация')),
                ('tags', models.ManyToManyField(blank=True, null=True, related_name='merchant_profiles', to='users.ProjectTag', verbose_name='Тэги')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='merchant_profile', to=settings.AUTH_USER_MODEL, verbose_name='Профиль')),
            ],
            options={
                'verbose_name': 'Профиль специалиста',
                'verbose_name_plural': 'Профили специалистов',
            },
        ),
        migrations.CreateModel(
            name='ClientProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Фамилия')),
                ('rating', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Рейтинг')),
                ('avatar', models.FileField(blank=True, null=True, upload_to=utils.upload.user_avatar_path, validators=[utils.validators.validate_file_size, utils.validators.basic_validate_images])),
                ('date_of_birth', models.DateTimeField(verbose_name='Дата рождения')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='client_profile', to=settings.AUTH_USER_MODEL, verbose_name='Профиль')),
            ],
            options={
                'verbose_name': 'Профиль клиента',
                'verbose_name_plural': 'Профили клиентов',
            },
        ),
        migrations.AddField(
            model_name='city',
            name='country',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cities', to='users.Country', verbose_name='Страна'),
        ),
    ]
